{"version":3,"file":"v2-sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0xB8a040f25890A80363c1D82f6eF23322aAb46dF1'\n\nexport const INIT_CODE_HASH = 'd791fed674bf5115485e28b3ecf3febe345200063a5d9056ce39654010787fef'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport {\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  FIVE,\n  _997,\n  _1000,\n  ONE,\n  ZERO,\n  BASIS_POINTS,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT\n} from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   */\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = this.derivePercentAfterSellFees(inputAmount)\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = this.derivePercentAfterBuyFees(outputAmount)\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax))\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = this.derivePercentAfterBuyFees(outputAmount)\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = this.derivePercentAfterSellFees(inputAmount)\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = inputAmount.currency.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = outputAmount.currency.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","token0","token1","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","sellFeeBps","gt","BigNumber","from","buyFeeBps","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":"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"}